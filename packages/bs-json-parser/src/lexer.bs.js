// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Buffer = require("bs-platform/lib/js/buffer.js");
var Lexing = require("bs-platform/lib/js/lexing.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var $$SyntaxError = Caml_exceptions.create("Lexer-BsJson.SyntaxError");

function next_line(lexbuf) {
  var pos = lexbuf[/* lex_curr_p */11];
  lexbuf[/* lex_curr_p */11] = /* record */[
    /* pos_fname */pos[/* pos_fname */0],
    /* pos_lnum */pos[/* pos_lnum */1] + 1 | 0,
    /* pos_bol */lexbuf[/* lex_curr_pos */5],
    /* pos_cnum */pos[/* pos_cnum */3]
  ];
  return /* () */0;
}

var __ocaml_lex_tables = /* record */[
  /* lex_base */"\0\0\xf2\xff\xf3\xff\xf4\xff\xf5\xff\xf6\xff\xf7\xff\xf8\xff\x0b\0\x17\0!\0\0\0\0\0\0\0\xfe\xff\x01\0\x03\0\0\0\x01\0\xfd\xff\x01\0\0\0\xfc\xff\x03\0\0\0\x02\0\xfb\xff\x02\0\xf6\xff\x03\0-\0\xff\xff\xf8\xff\xf9\xff\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff",
  /* lex_backtrk */"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
  /* lex_default */"\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\x1d\0\0\0\x1d\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_trans */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\x0e\0\x0e\0\x10\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\x07\0\x10\0\x1f\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\n\0\b\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\x02\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\x06\0&\0\x05\0\x1e\0\xff\xff\0\0\x17\0\0\0\0\0\0\0\x16\0\x0b\0\x1a\0\0\0\0\0\0\0\0\0\x12\0\x13\0\r\0\x18\0\0\0\0\0\x14\0\x19\0\f\0\x11\0\x15\0\0\0\0\0\0\0\0\0\x04\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0%\0\0\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0#\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\"\0\0\0\0\0\0\0!\0\0\0 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1c\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_check */"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x0f\0\x10\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\x10\0\x1b\0\x1d\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\t\0\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\x1e\0\0\0\x1b\0\x1d\0\xff\xff\x0b\0\xff\xff\xff\xff\xff\xff\x15\0\0\0\x19\0\xff\xff\xff\xff\xff\xff\xff\xff\x11\0\x12\0\0\0\x17\0\xff\xff\xff\xff\f\0\x18\0\0\0\r\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\xff\xff\xff\xff\xff\xff\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\xff\xff\xff\xff\xff\xff\x1e\0\xff\xff\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1b\0\x1d\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
  /* lex_base_code */"",
  /* lex_backtrk_code */"",
  /* lex_default_code */"",
  /* lex_trans_code */"",
  /* lex_check_code */"",
  /* lex_code */""
];

function __ocaml_lex_read_string_rec(buf, lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    switch (__ocaml_lex_state$1) {
      case 0 : 
          return /* STRING */Block.__(0, [$$Buffer.contents(buf)]);
      case 1 : 
          $$Buffer.add_char(buf, /* "/" */47);
          ___ocaml_lex_state = 27;
          continue ;
      case 2 : 
          $$Buffer.add_char(buf, /* "\\" */92);
          ___ocaml_lex_state = 27;
          continue ;
      case 3 : 
          $$Buffer.add_char(buf, /* "\b" */8);
          ___ocaml_lex_state = 27;
          continue ;
      case 4 : 
          $$Buffer.add_char(buf, /* "\012" */12);
          ___ocaml_lex_state = 27;
          continue ;
      case 5 : 
          $$Buffer.add_char(buf, /* "\n" */10);
          ___ocaml_lex_state = 27;
          continue ;
      case 6 : 
          $$Buffer.add_char(buf, /* "\r" */13);
          ___ocaml_lex_state = 27;
          continue ;
      case 7 : 
          $$Buffer.add_char(buf, /* "\t" */9);
          ___ocaml_lex_state = 27;
          continue ;
      case 8 : 
          $$Buffer.add_string(buf, Lexing.lexeme(lexbuf));
          ___ocaml_lex_state = 27;
          continue ;
      case 9 : 
          throw [
                $$SyntaxError,
                "String is not terminated"
              ];
      case 10 : 
          throw [
                $$SyntaxError,
                "Illegal string character: " + Lexing.lexeme(lexbuf)
              ];
      default:
        Curry._1(lexbuf[/* refill_buff */0], lexbuf);
        ___ocaml_lex_state = __ocaml_lex_state$1;
        continue ;
    }
  };
}

function __ocaml_lex_read_rec(lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    switch (__ocaml_lex_state$1) {
      case 0 : 
          ___ocaml_lex_state = 0;
          continue ;
      case 1 : 
          next_line(lexbuf);
          ___ocaml_lex_state = 0;
          continue ;
      case 2 : 
          return /* NULL */3;
      case 3 : 
          return /* TRUE */0;
      case 4 : 
          return /* FALSE */6;
      case 5 : 
          return /* INT */Block.__(1, [Caml_format.caml_int_of_string(Lexing.lexeme(lexbuf))]);
      case 6 : 
          return /* FLOAT */Block.__(2, [Caml_format.caml_float_of_string(Lexing.lexeme(lexbuf))]);
      case 7 : 
          return __ocaml_lex_read_string_rec($$Buffer.create(17), lexbuf, 27);
      case 8 : 
          return /* LEFT_BRACKET */4;
      case 9 : 
          return /* RIGHT_BRACKET */1;
      case 10 : 
          return /* LEFT_BRACE */5;
      case 11 : 
          return /* RIGHT_BRACE */2;
      case 12 : 
          return /* COLON */8;
      case 13 : 
          return /* COMMA */7;
      default:
        Curry._1(lexbuf[/* refill_buff */0], lexbuf);
        ___ocaml_lex_state = __ocaml_lex_state$1;
        continue ;
    }
  };
}

function read(lexbuf) {
  return __ocaml_lex_read_rec(lexbuf, 0);
}

function read_string(buf, lexbuf) {
  return __ocaml_lex_read_string_rec(buf, lexbuf, 27);
}

exports.$$SyntaxError = $$SyntaxError;
exports.next_line = next_line;
exports.__ocaml_lex_tables = __ocaml_lex_tables;
exports.read = read;
exports.__ocaml_lex_read_rec = __ocaml_lex_read_rec;
exports.read_string = read_string;
exports.__ocaml_lex_read_string_rec = __ocaml_lex_read_string_rec;
/* No side effect */
