// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Lexing = require("bs-platform/lib/js/lexing.js");
var Lexer$BsJsonParser = require("./lexer.bs.js");
var Parser$BsJsonParser = require("./parser.bs.js");

function get_position(lexbuf) {
  var pos = lexbuf[/* lex_curr_p */11];
  return /* record */[
          /* fileName */pos[/* pos_fname */0],
          /* lineNumber */pos[/* pos_lnum */1],
          /* columnNumber */(pos[/* pos_cnum */3] - pos[/* pos_bol */2] | 0) + 1 | 0
        ];
}

function parse(s) {
  var lexbuf = Lexing.from_string(s);
  try {
    return /* Ok */Block.__(0, [Parser$BsJsonParser.prog(Lexer$BsJsonParser.read, lexbuf)]);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Lexer$BsJsonParser.$$SyntaxError) {
      return /* Error */Block.__(1, [/* SyntaxError */Block.__(0, [/* tuple */[
                      get_position(lexbuf),
                      exn[1]
                    ]])]);
    } else if (exn === Parser$BsJsonParser.$$Error) {
      return /* Error */Block.__(1, [/* ParserError */Block.__(1, [get_position(lexbuf)])]);
    } else {
      throw exn;
    }
  }
}

exports.get_position = get_position;
exports.parse = parse;
/* No side effect */
