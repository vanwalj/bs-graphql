// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function serialize_operation_type(param) {
  switch (param) {
    case 0 : 
        return "query";
    case 1 : 
        return "mutation";
    case 2 : 
        return "subscription";
    
  }
}

function serialize_operation_name(param) {
  if (param !== undefined) {
    return " " + (param + " ");
  } else {
    return " ";
  }
}

function serialize_value(param) {
  if (typeof param === "number") {
    return "null";
  } else {
    var variant = param[0];
    if (variant >= 737456202) {
      if (variant >= 848054398) {
        if (variant >= 963043957) {
          return "{" + ($$String.concat(",", List.map((function (param) {
                              return "\"" + (param[0] + ("\": " + serialize_value(param[1])));
                            }), param[1])) + "}");
        } else {
          return "[" + ($$String.concat(",", List.map(serialize_value, param[1])) + "]");
        }
      } else if (variant >= 770676513) {
        return param[1];
      } else if (param[1]) {
        return "true";
      } else {
        return "false";
      }
    } else if (variant >= 3654863) {
      if (variant >= 365180284) {
        return Pervasives.string_of_float(param[1]);
      } else {
        return String(param[1]);
      }
    } else if (variant >= -976970511) {
      return "\"" + (param[1] + "\"");
    } else {
      return "$" + param[1];
    }
  }
}

function serialize_argument(param) {
  return param[0] + (":" + serialize_value(param[1]));
}

function serialize_arguments_list(arguments_list) {
  return "(" + ($$String.concat(", ", List.map(serialize_argument, arguments_list)) + ")");
}

function serialize_variable_type(param) {
  switch (param.tag | 0) {
    case 0 : 
        return param[0];
    case 1 : 
        return serialize_variable_type(param[0]) + "!";
    case 2 : 
        return "[" + (serialize_variable_type(param[0]) + "]");
    
  }
}

function serialize_operation_variables(operation_variables) {
  var _serialize_operation_variables = function (param) {
    if (param) {
      var serialized_variable = _serialize_operation_variables(param[1]);
      return /* :: */[
              serialize_variable(param[0]),
              serialized_variable
            ];
    } else {
      return /* [] */0;
    }
  };
  if (operation_variables !== undefined) {
    return "(" + ($$String.concat(", ", _serialize_operation_variables(operation_variables)) + ")");
  } else {
    return "";
  }
}

function serialize_selection_list(selection_list) {
  return "{" + ($$String.concat(" ", List.map(serialize_selection, selection_list)) + "}");
}

function serialize_operation(operation) {
  return serialize_operation_type(operation[/* typ */0]) + (serialize_operation_name(operation[/* name */2]) + (serialize_operation_variables(operation[/* variables */3]) + serialize_selection_list(operation[/* selection */1])));
}

function serialize_fragment(param) {
  return "fragment " + (param[/* name */0] + (" on " + (param[/* type_name */1] + serialize_selection_list(param[/* selection */2]))));
}

function serialize_variable(param) {
  var match = param[0];
  var $$default = match[/* default */2];
  return "$" + (match[/* name */0] + (":" + (serialize_variable_type(match[/* typ */1]) + (
                $$default !== undefined ? " = " + serialize_value($$default) : ""
              ))));
}

function serialize_inline_fragment(param) {
  return "...on " + (param[/* type_name */0] + (" " + serialize_selection_list(param[/* selection */1])));
}

function serialize_field(param) {
  var $$arguments = param[/* arguments */3];
  var selection = param[/* selection */2];
  var alias = param[/* alias */1];
  return (
          alias !== undefined ? alias + ":" : ""
        ) + (param[/* name */0] + ((
              $$arguments !== undefined ? serialize_arguments_list($$arguments) : ""
            ) + (
              selection !== undefined ? serialize_selection_list(selection) : ""
            )));
}

function serialize_fragment_spread(param) {
  return "...on " + param[/* name */0];
}

function serialize_selection(param) {
  switch (param.tag | 0) {
    case 0 : 
        return serialize_field(param[0]);
    case 1 : 
        return serialize_fragment_spread(param[0]);
    case 2 : 
        return serialize_inline_fragment(param[0]);
    
  }
}

function serialize_definition(param) {
  if (param.tag) {
    return serialize_fragment(param[0]);
  } else {
    return serialize_operation(param[0]);
  }
}

function serialize_document($$document) {
  return $$String.concat("\n", List.map(serialize_definition, $$document));
}

exports.serialize_operation_type = serialize_operation_type;
exports.serialize_operation_name = serialize_operation_name;
exports.serialize_value = serialize_value;
exports.serialize_argument = serialize_argument;
exports.serialize_arguments_list = serialize_arguments_list;
exports.serialize_variable_type = serialize_variable_type;
exports.serialize_variable = serialize_variable;
exports.serialize_operation_variables = serialize_operation_variables;
exports.serialize_fragment = serialize_fragment;
exports.serialize_field = serialize_field;
exports.serialize_fragment_spread = serialize_fragment_spread;
exports.serialize_inline_fragment = serialize_inline_fragment;
exports.serialize_selection = serialize_selection;
exports.serialize_selection_list = serialize_selection_list;
exports.serialize_operation = serialize_operation;
exports.serialize_definition = serialize_definition;
exports.serialize_document = serialize_document;
/* No side effect */
