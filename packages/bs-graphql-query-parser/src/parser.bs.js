// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var $$Error = Caml_exceptions.create("Parser-BsGraphqlQueryParser.MenhirBasics.Error");

function _menhir_goto_read_const_list(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            65,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run73(_menhir_env, _menhir_stack$1, /* MenhirState77 */2);
      case 4 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _v$1 = /* `List */[
            848054398,
            _v
          ];
          return _menhir_goto_read_const_value(_menhir_env$1, _menhir_stack[0], _menhir_stack[1], _v$1);
      case 10 : 
          return _menhir_run76(_menhir_env, _menhir_stack$1, /* MenhirState77 */2);
      case 11 : 
          return _menhir_run79(_menhir_env, _menhir_stack$1, /* MenhirState77 */2);
      case 13 : 
          return _menhir_run85(_menhir_env, _menhir_stack$1, /* MenhirState77 */2);
      default:
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  109,
                  8
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState77 */2);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run74(_menhir_env, _menhir_stack$1, /* MenhirState77 */2, _tok[0]);
      case 1 : 
          return _menhir_run75(_menhir_env, _menhir_stack$1, /* MenhirState77 */2, _tok[0]);
      case 2 : 
          return _menhir_run83(_menhir_env, _menhir_stack$1, /* MenhirState77 */2, _tok[0]);
      case 3 : 
          return _menhir_run84(_menhir_env, _menhir_stack$1, /* MenhirState77 */2, _tok[0]);
      
    }
  }
}

function _menhir_goto_read_selection(__menhir_env, __menhir_stack, __menhir_s, __v) {
  while(true) {
    var _v = __v;
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s,
      _v
    ];
    switch (_menhir_s) {
      case 0 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1899,
                    8
                  ]
                ];
          }
          var _tok = _menhir_env[/* _menhir_token */2];
          var exit = 0;
          if (typeof _tok === "number") {
            switch (_tok) {
              case 2 : 
                  return _menhir_run8(_menhir_env, _menhir_stack$1);
              case 5 : 
                  var _menhir_env$1 = _menhir_discard(_menhir_env);
                  var match = _menhir_stack[0];
                  var match$1 = match[0];
                  var match$2 = match$1[0];
                  var _v_000 = /* Operation */Block.__(0, [/* record */[
                        /* typ */match$1[1],
                        /* selection */_v,
                        /* name */match[1],
                        /* variables */_menhir_stack[1]
                      ]]);
                  var _v_001 = match$2[1];
                  var _v$1 = /* :: */[
                    _v_000,
                    _v_001
                  ];
                  return _menhir_goto_read_definitions(_menhir_env$1, match$2[0], _v$1);
              default:
                exit = 1;
            }
          } else if (_tok.tag === 1) {
            return _menhir_reduce3(_menhir_env, _menhir_stack$1);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1945,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 6 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1836,
                    8
                  ]
                ];
          }
          var _tok$1 = _menhir_env[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 2 : 
                  return _menhir_run8(_menhir_env, _menhir_stack$1);
              case 5 : 
                  var _menhir_env$2 = _menhir_discard(_menhir_env);
                  var match$3 = _menhir_stack[0];
                  var match$4 = match$3[0];
                  var _v_000$1 = /* Fragment */Block.__(1, [/* record */[
                        /* name */match$3[1],
                        /* type_name */_menhir_stack[1],
                        /* selection */_v
                      ]]);
                  var _v_001$1 = match$4[1];
                  var _v$2 = /* :: */[
                    _v_000$1,
                    _v_001$1
                  ];
                  return _menhir_goto_read_definitions(_menhir_env$2, match$4[0], _v$2);
              default:
                exit$1 = 1;
            }
          } else if (_tok$1.tag === 1) {
            return _menhir_reduce3(_menhir_env, _menhir_stack$1);
          } else {
            exit$1 = 1;
          }
          if (exit$1 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1875,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 7 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1782,
                    8
                  ]
                ];
          }
          var _tok$2 = _menhir_env[/* _menhir_token */2];
          var exit$2 = 0;
          if (typeof _tok$2 === "number") {
            switch (_tok$2) {
              case 2 : 
                  return _menhir_run8(_menhir_env, _menhir_stack$1);
              case 5 : 
                  var _menhir_env$3 = _menhir_discard(_menhir_env);
                  var _v$3 = _v;
                  return _menhir_goto_read_sub_selection(_menhir_env$3, _menhir_stack[0], _v$3);
              default:
                exit$2 = 1;
            }
          } else if (_tok$2.tag === 1) {
            return _menhir_reduce3(_menhir_env, _menhir_stack$1);
          } else {
            exit$2 = 1;
          }
          if (exit$2 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1815,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 1 : 
      case 2 : 
      case 3 : 
      case 4 : 
      case 5 : 
      case 8 : 
      case 9 : 
      case 10 : 
          return _menhir_fail(/* () */0);
      case 11 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1718,
                    8
                  ]
                ];
          }
          var _tok$3 = _menhir_env[/* _menhir_token */2];
          var exit$3 = 0;
          if (typeof _tok$3 === "number") {
            switch (_tok$3) {
              case 2 : 
                  return _menhir_run8(_menhir_env, _menhir_stack$1);
              case 5 : 
                  var _menhir_env$4 = _menhir_discard(_menhir_env);
                  var match$5 = _menhir_stack[0];
                  var _v_000$2 = /* InlineFragment */Block.__(2, [/* record */[
                        /* type_name */_menhir_stack[1],
                        /* selection */_v
                      ]]);
                  var _v_001$2 = match$5[2];
                  var _v$4 = /* :: */[
                    _v_000$2,
                    _v_001$2
                  ];
                  __v = _v$4;
                  __menhir_s = match$5[1];
                  __menhir_stack = match$5[0];
                  __menhir_env = _menhir_env$4;
                  continue ;
              default:
                exit$3 = 1;
            }
          } else if (_tok$3.tag === 1) {
            return _menhir_reduce3(_menhir_env, _menhir_stack$1);
          } else {
            exit$3 = 1;
          }
          if (exit$3 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1761,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 12 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1661,
                    8
                  ]
                ];
          }
          var _tok$4 = _menhir_env[/* _menhir_token */2];
          var exit$4 = 0;
          if (typeof _tok$4 === "number") {
            switch (_tok$4) {
              case 2 : 
                  return _menhir_run8(_menhir_env, _menhir_stack$1);
              case 5 : 
                  var _menhir_env$5 = _menhir_discard(_menhir_env);
                  var _v_000$3 = /* Operation */Block.__(0, [/* record */[
                        /* typ : Query */0,
                        /* selection */_v,
                        /* name */undefined,
                        /* variables */undefined
                      ]]);
                  var _v_001$3 = _menhir_stack[1];
                  var _v$5 = /* :: */[
                    _v_000$3,
                    _v_001$3
                  ];
                  return _menhir_goto_read_definitions(_menhir_env$5, _menhir_stack[0], _v$5);
              default:
                exit$4 = 1;
            }
          } else if (_tok$4.tag === 1) {
            return _menhir_reduce3(_menhir_env, _menhir_stack$1);
          } else {
            exit$4 = 1;
          }
          if (exit$4 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1697,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      
    }
  };
}

function _menhir_reduce3(_menhir_env, _menhir_stack) {
  var __menhir_env = _menhir_env;
  var _menhir_stack$1 = _menhir_stack;
  var __v = undefined;
  while(true) {
    var _v = __v;
    var _menhir_env$1 = __menhir_env;
    var _menhir_stack$2 = /* tuple */[
      _menhir_stack$1,
      _v
    ];
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              1238,
              4
            ]
          ];
    }
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number" || _tok.tag !== 1) {
      exit = 1;
    } else {
      var _v$1 = _tok[0];
      var _menhir_stack$3 = /* tuple */[
        _menhir_stack$2,
        _v$1
      ];
      var _menhir_env$2 = _menhir_discard(_menhir_env$1);
      var _tok$1 = _menhir_env$2[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok$1 === "number") {
        switch (_tok$1) {
          case 2 : 
          case 5 : 
          case 9 : 
          case 11 : 
              return _menhir_goto_read_arguments(_menhir_env$2, _menhir_stack$3, undefined);
          case 17 : 
              var _menhir_env$3 = _menhir_discard(_menhir_env$2);
              var _v$2 = _v$1;
              __v = _v$2;
              __menhir_env = _menhir_env$3;
              continue ;
          default:
            exit$1 = 2;
        }
      } else if (_tok$1.tag === 1) {
        return _menhir_goto_read_arguments(_menhir_env$2, _menhir_stack$3, undefined);
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  1278,
                  14
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack$1[0], _menhir_stack$1[1]);
      }
      
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                1293,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1[0], _menhir_stack$1[1]);
    }
    
  };
}

function _menhir_fail(param) {
  Printf.fprintf(Pervasives.stderr, /* Format */[
        /* String_literal */Block.__(11, [
            "Internal failure -- please contact the parser generator's developers.\n",
            /* Flush */Block.__(10, [/* End_of_format */0])
          ]),
        "Internal failure -- please contact the parser generator's developers.\n%!"
      ]);
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "parser.ml",
          1362,
          2
        ]
      ];
}

function _menhir_errorcase(_menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var exit = 0;
    switch (_menhir_s) {
      case 4 : 
          __menhir_s = _menhir_stack[1];
          __menhir_stack = _menhir_stack[0];
          continue ;
      case 2 : 
      case 9 : 
      case 11 : 
          exit = 1;
          break;
      case 0 : 
      case 1 : 
      case 3 : 
      case 5 : 
      case 6 : 
      case 7 : 
      case 8 : 
      case 10 : 
      case 12 : 
          throw $$Error;
      
    }
    if (exit === 1) {
      var match = _menhir_stack[0];
      __menhir_s = match[1];
      __menhir_stack = match[0];
      continue ;
    }
    
  };
}

function _menhir_run8(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok === 7) {
      var _menhir_env$2 = _menhir_discard(_menhir_env$1);
      var _tok$1 = _menhir_env$2[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok$1 === "number" || _tok$1.tag !== 1) {
        exit$1 = 2;
      } else {
        var _menhir_stack_001 = _tok$1[0];
        var _menhir_stack$1 = /* tuple */[
          _menhir_stack,
          _menhir_stack_001
        ];
        var _menhir_env$3 = _menhir_discard(_menhir_env$2);
        var _tok$2 = _menhir_env$3[/* _menhir_token */2];
        var exit$2 = 0;
        if (typeof _tok$2 === "number" && _tok$2 === 11) {
          var _menhir_env$4 = _menhir_discard(_menhir_env$3);
          return _menhir_reduce44(_menhir_env$4, _menhir_stack$1, /* MenhirState11 */11);
        } else {
          exit$2 = 3;
        }
        if (exit$2 === 3) {
          if (_menhir_env$3[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1591,
                    18
                  ]
                ];
          }
          _menhir_env$3[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$3, _menhir_stack[0], _menhir_stack[1]);
        }
        
      }
      if (exit$1 === 2) {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  1605,
                  12
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack[0], _menhir_stack[1]);
      }
      
    } else {
      exit = 1;
    }
  } else if (_tok.tag === 1) {
    var _menhir_env$5 = _menhir_discard(_menhir_env$1);
    var _v_000 = /* FragmentSpread */Block.__(1, [/* record */[/* name */_tok[0]]]);
    var _v_001 = _menhir_stack[2];
    var _v = /* :: */[
      _v_000,
      _v_001
    ];
    return _menhir_goto_read_selection(_menhir_env$5, _menhir_stack[0], _menhir_stack[1], _v);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              1617,
              6
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack[0], _menhir_stack[1]);
  }
  
}

function _menhir_goto_read_definitions(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            2019,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 1 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          return _menhir_goto_read_operation_type(_menhir_env$1, _menhir_stack$1, /* Subscription */2);
      case 6 : 
          var _menhir_env$2 = _menhir_discard(_menhir_env);
          return _menhir_goto_read_operation_type(_menhir_env$2, _menhir_stack$1, /* Query */0);
      case 8 : 
          var _menhir_env$3 = _menhir_discard(_menhir_env);
          return _menhir_goto_read_operation_type(_menhir_env$3, _menhir_stack$1, /* Mutation */1);
      case 11 : 
          var _menhir_env$4 = _menhir_discard(_menhir_env);
          return _menhir_reduce44(_menhir_env$4, _menhir_stack$1, /* MenhirState6 */12);
      case 12 : 
          var _menhir_env$5 = _menhir_discard(_menhir_env);
          var _tok$1 = _menhir_env$5[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok$1 === "number" || _tok$1.tag !== 1) {
            exit$1 = 2;
          } else {
            var _menhir_stack_001 = _tok$1[0];
            var _menhir_stack$2 = /* tuple */[
              _menhir_stack$1,
              _menhir_stack_001
            ];
            var _menhir_env$6 = _menhir_discard(_menhir_env$5);
            var _tok$2 = _menhir_env$6[/* _menhir_token */2];
            var exit$2 = 0;
            if (typeof _tok$2 === "number" && _tok$2 === 7) {
              var _menhir_env$7 = _menhir_discard(_menhir_env$6);
              var _tok$3 = _menhir_env$7[/* _menhir_token */2];
              var exit$3 = 0;
              if (typeof _tok$3 === "number" || _tok$3.tag !== 1) {
                exit$3 = 4;
              } else {
                var _menhir_stack_001$1 = _tok$3[0];
                var _menhir_stack$3 = /* tuple */[
                  _menhir_stack$2,
                  _menhir_stack_001$1
                ];
                var _menhir_env$8 = _menhir_discard(_menhir_env$7);
                var _tok$4 = _menhir_env$8[/* _menhir_token */2];
                var exit$4 = 0;
                if (typeof _tok$4 === "number" && _tok$4 === 11) {
                  var _menhir_env$9 = _menhir_discard(_menhir_env$8);
                  return _menhir_reduce44(_menhir_env$9, _menhir_stack$3, /* MenhirState52 */6);
                } else {
                  exit$4 = 5;
                }
                if (exit$4 === 5) {
                  if (_menhir_env$8[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "parser.ml",
                            2106,
                            32
                          ]
                        ];
                  }
                  _menhir_env$8[/* _menhir_error */3] = true;
                  throw $$Error;
                }
                
              }
              if (exit$3 === 4) {
                if (_menhir_env$7[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "parser.ml",
                          2120,
                          26
                        ]
                      ];
                }
                _menhir_env$7[/* _menhir_error */3] = true;
                throw $$Error;
              }
              
            } else {
              exit$2 = 3;
            }
            if (exit$2 === 3) {
              if (_menhir_env$6[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "parser.ml",
                        2131,
                        20
                      ]
                    ];
              }
              _menhir_env$6[/* _menhir_error */3] = true;
              throw $$Error;
            }
            
          }
          if (exit$1 === 2) {
            if (_menhir_env$5[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      2141,
                      14
                    ]
                  ];
            }
            _menhir_env$5[/* _menhir_error */3] = true;
            throw $$Error;
          }
          break;
      case 15 : 
          return _v;
      case 0 : 
      case 2 : 
      case 3 : 
      case 4 : 
      case 5 : 
      case 7 : 
      case 9 : 
      case 10 : 
      case 13 : 
      case 14 : 
      case 16 : 
      case 17 : 
      case 18 : 
          exit = 1;
          break;
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              2191,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    throw $$Error;
  }
  
}

function _menhir_goto_read_sub_selection(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1377,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
      case 5 : 
          exit = 2;
          break;
      case 11 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          return _menhir_reduce44(_menhir_env$1, _menhir_stack$1, /* MenhirState43 */7);
      default:
        exit = 1;
    }
  } else {
    exit = _tok.tag === 1 ? 2 : 1;
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  1414,
                  8
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        var match = _menhir_stack[0][0][0];
        return _menhir_errorcase(_menhir_env, match[0], match[1]);
    case 2 : 
        var match$1 = _menhir_stack[0];
        var match$2 = match$1[0];
        var match$3 = match$2[0];
        var _v_000 = /* Field */Block.__(0, [/* record */[
              /* name */match$1[1],
              /* alias */match$2[1],
              /* selection */_v,
              /* arguments */_menhir_stack[1]
            ]]);
        var _v_001 = match$3[2];
        var _v$1 = /* :: */[
          _v_000,
          _v_001
        ];
        return _menhir_goto_read_selection(_menhir_env, match$3[0], match$3[1], _v$1);
    
  }
}

function _menhir_discard(_menhir_env) {
  var lexer = _menhir_env[/* _menhir_lexer */0];
  var lexbuf = _menhir_env[/* _menhir_lexbuf */1];
  var _tok = Curry._1(lexer, lexbuf);
  return /* record */[
          /* _menhir_lexer */lexer,
          /* _menhir_lexbuf */lexbuf,
          /* _menhir_token */_tok,
          /* _menhir_error */false
        ];
}

function _menhir_goto_read_const_assoc(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            122,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok === 5) {
      var _menhir_env$1 = _menhir_discard(_menhir_env);
      var _v$1 = /* `Assoc */[
        963043957,
        _v
      ];
      return _menhir_goto_read_const_value(_menhir_env$1, _menhir_stack[0], _menhir_stack[1], _v$1);
    } else {
      exit = 1;
    }
  } else if (_tok.tag) {
    exit = 1;
  } else {
    var _menhir_stack_001 = _tok[0];
    var _menhir_stack$2 = /* tuple */[
      _menhir_stack$1,
      _menhir_stack_001
    ];
    var _menhir_env$2 = _menhir_discard(_menhir_env);
    var _tok$1 = _menhir_env$2[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number" && _tok$1 === 17) {
      var _menhir_env$3 = _menhir_discard(_menhir_env$2);
      var _tok$2 = _menhir_env$3[/* _menhir_token */2];
      if (typeof _tok$2 === "number") {
        switch (_tok$2) {
          case 0 : 
              return _menhir_run73(_menhir_env$3, _menhir_stack$2, /* MenhirState82 */1);
          case 10 : 
              return _menhir_run76(_menhir_env$3, _menhir_stack$2, /* MenhirState82 */1);
          case 11 : 
              return _menhir_run79(_menhir_env$3, _menhir_stack$2, /* MenhirState82 */1);
          case 13 : 
              return _menhir_run85(_menhir_env$3, _menhir_stack$2, /* MenhirState82 */1);
          default:
            if (_menhir_env$3[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      192,
                      20
                    ]
                  ];
            }
            _menhir_env$3[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$3, _menhir_stack$2, /* MenhirState82 */1);
        }
      } else {
        switch (_tok$2.tag | 0) {
          case 0 : 
              return _menhir_run74(_menhir_env$3, _menhir_stack$2, /* MenhirState82 */1, _tok$2[0]);
          case 1 : 
              return _menhir_run75(_menhir_env$3, _menhir_stack$2, /* MenhirState82 */1, _tok$2[0]);
          case 2 : 
              return _menhir_run83(_menhir_env$3, _menhir_stack$2, /* MenhirState82 */1, _tok$2[0]);
          case 3 : 
              return _menhir_run84(_menhir_env$3, _menhir_stack$2, /* MenhirState82 */1, _tok$2[0]);
          
        }
      }
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      if (_menhir_env$2[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                198,
                14
              ]
            ];
      }
      _menhir_env$2[/* _menhir_error */3] = true;
      throw $$Error;
    }
    
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              208,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack[0], _menhir_stack[1]);
  }
  
}

function _menhir_goto_read_argument_value(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_s >= 8) {
    switch (_menhir_s - 8 | 0) {
      case 0 : 
          var match = _menhir_stack[0];
          var _v_000 = /* tuple */[
            _menhir_stack[1],
            _v
          ];
          var _v_001 = match[1];
          var _v$1 = /* :: */[
            _v_000,
            _v_001
          ];
          return _menhir_goto_read_argument_assoc(_menhir_env, match[0], _v$1);
      case 1 : 
          var _v_001$1 = _menhir_stack[1];
          var _v$2 = /* :: */[
            _v,
            _v_001$1
          ];
          return _menhir_goto_read_argument_list(_menhir_env, _menhir_stack[0], _v$2);
      case 2 : 
          var match$1 = _menhir_stack[0];
          var _v_000$1 = /* tuple */[
            _menhir_stack[1],
            _v
          ];
          var _v_001$2 = match$1[1];
          var _v$3 = /* :: */[
            _v_000$1,
            _v_001$2
          ];
          return _menhir_goto_read_argument(_menhir_env, match$1[0], _v$3);
      case 3 : 
      case 4 : 
          return _menhir_fail(/* () */0);
      
    }
  } else {
    return _menhir_fail(/* () */0);
  }
}

function _menhir_goto_read_default_variable_value(_menhir_env, _menhir_stack, _v) {
  var match = _menhir_stack[0];
  var match$1 = match[0];
  var _v_000 = /* Variable */[/* record */[
      /* name */match[1],
      /* typ */_menhir_stack[2],
      /* default */_v
    ]];
  var _v_001 = match$1[1];
  var _v$1 = /* :: */[
    _v_000,
    _v_001
  ];
  return _menhir_goto_read_variable(_menhir_env, match$1[0], _v$1);
}

function _menhir_run33(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* `Int */[
    3654863,
    _v
  ];
  return _menhir_goto_read_argument_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run36(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number" || _tok.tag !== 1) {
    exit = 1;
  } else {
    var _menhir_env$2 = _menhir_discard(_menhir_env$1);
    var _v_001 = _tok[0];
    var _v = /* `Variable */[
      -1027682724,
      _v_001
    ];
    return _menhir_goto_read_argument_value(_menhir_env$2, _menhir_stack, _menhir_s, _v);
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              798,
              6
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_run25(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* `Enum */[
    770676513,
    _v
  ];
  return _menhir_goto_read_argument_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run26(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_read_argument_list(_menhir_env$1, _menhir_stack$1, /* [] */0);
}

function _menhir_run35(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_read_argument_value(_menhir_env$1, _menhir_stack, _menhir_s, /* `Bool */[
              737456202,
              false
            ]);
}

function _menhir_run29(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_read_argument_assoc(_menhir_env$1, _menhir_stack$1, /* [] */0);
}

function _menhir_goto_read_arguments(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1088,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 9 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          return _menhir_goto_read_argument(_menhir_env$1, _menhir_stack$1, /* [] */0);
      case 2 : 
      case 5 : 
      case 11 : 
          return _menhir_goto_read_sub_selection(_menhir_env, _menhir_stack$1, undefined);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_goto_read_sub_selection(_menhir_env, _menhir_stack$1, undefined);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              1110,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    var match = _menhir_stack[0][0];
    return _menhir_errorcase(_menhir_env, match[0], match[1]);
  }
  
}

function _menhir_run24(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* `String */[
    -976970511,
    _v
  ];
  return _menhir_goto_read_argument_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run34(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* `Float */[
    365180284,
    _v
  ];
  return _menhir_goto_read_argument_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run23(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_read_argument_value(_menhir_env$1, _menhir_stack, _menhir_s, /* `Bool */[
              737456202,
              true
            ]);
}

function _menhir_goto_read_argument_assoc(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            354,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok === 5) {
      var _menhir_env$1 = _menhir_discard(_menhir_env);
      var _v$1 = /* `Assoc */[
        963043957,
        _v
      ];
      return _menhir_goto_read_argument_value(_menhir_env$1, _menhir_stack[0], _menhir_stack[1], _v$1);
    } else {
      exit = 1;
    }
  } else if (_tok.tag) {
    exit = 1;
  } else {
    var _menhir_stack_001 = _tok[0];
    var _menhir_stack$2 = /* tuple */[
      _menhir_stack$1,
      _menhir_stack_001
    ];
    var _menhir_env$2 = _menhir_discard(_menhir_env);
    var _tok$1 = _menhir_env$2[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number" && _tok$1 === 17) {
      var _menhir_env$3 = _menhir_discard(_menhir_env$2);
      var _tok$2 = _menhir_env$3[/* _menhir_token */2];
      if (typeof _tok$2 === "number") {
        switch (_tok$2) {
          case 0 : 
              return _menhir_run23(_menhir_env$3, _menhir_stack$2, /* MenhirState32 */8);
          case 10 : 
              return _menhir_run26(_menhir_env$3, _menhir_stack$2, /* MenhirState32 */8);
          case 11 : 
              return _menhir_run29(_menhir_env$3, _menhir_stack$2, /* MenhirState32 */8);
          case 13 : 
              return _menhir_run35(_menhir_env$3, _menhir_stack$2, /* MenhirState32 */8);
          case 16 : 
              return _menhir_run36(_menhir_env$3, _menhir_stack$2, /* MenhirState32 */8);
          default:
            if (_menhir_env$3[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      427,
                      20
                    ]
                  ];
            }
            _menhir_env$3[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$3, _menhir_stack$2, /* MenhirState32 */8);
        }
      } else {
        switch (_tok$2.tag | 0) {
          case 0 : 
              return _menhir_run24(_menhir_env$3, _menhir_stack$2, /* MenhirState32 */8, _tok$2[0]);
          case 1 : 
              return _menhir_run25(_menhir_env$3, _menhir_stack$2, /* MenhirState32 */8, _tok$2[0]);
          case 2 : 
              return _menhir_run33(_menhir_env$3, _menhir_stack$2, /* MenhirState32 */8, _tok$2[0]);
          case 3 : 
              return _menhir_run34(_menhir_env$3, _menhir_stack$2, /* MenhirState32 */8, _tok$2[0]);
          
        }
      }
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      if (_menhir_env$2[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                433,
                14
              ]
            ];
      }
      _menhir_env$2[/* _menhir_error */3] = true;
      throw $$Error;
    }
    
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              443,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack[0], _menhir_stack[1]);
  }
  
}

function _menhir_goto_read_argument(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            951,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok === 3) {
      var _menhir_env$1 = _menhir_discard(_menhir_env);
      var _v$1 = _v;
      return _menhir_goto_read_arguments(_menhir_env$1, _menhir_stack[0], _v$1);
    } else {
      exit = 1;
    }
  } else if (_tok.tag === 1) {
    var _menhir_stack_001 = _tok[0];
    var _menhir_stack$2 = /* tuple */[
      _menhir_stack$1,
      _menhir_stack_001
    ];
    var _menhir_env$2 = _menhir_discard(_menhir_env);
    var _tok$1 = _menhir_env$2[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number" && _tok$1 === 17) {
      var _menhir_env$3 = _menhir_discard(_menhir_env$2);
      var _tok$2 = _menhir_env$3[/* _menhir_token */2];
      if (typeof _tok$2 === "number") {
        switch (_tok$2) {
          case 0 : 
              return _menhir_run23(_menhir_env$3, _menhir_stack$2, /* MenhirState22 */10);
          case 10 : 
              return _menhir_run26(_menhir_env$3, _menhir_stack$2, /* MenhirState22 */10);
          case 11 : 
              return _menhir_run29(_menhir_env$3, _menhir_stack$2, /* MenhirState22 */10);
          case 13 : 
              return _menhir_run35(_menhir_env$3, _menhir_stack$2, /* MenhirState22 */10);
          case 16 : 
              return _menhir_run36(_menhir_env$3, _menhir_stack$2, /* MenhirState22 */10);
          default:
            if (_menhir_env$3[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1001,
                      20
                    ]
                  ];
            }
            _menhir_env$3[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$3, _menhir_stack$2, /* MenhirState22 */10);
        }
      } else {
        switch (_tok$2.tag | 0) {
          case 0 : 
              return _menhir_run24(_menhir_env$3, _menhir_stack$2, /* MenhirState22 */10, _tok$2[0]);
          case 1 : 
              return _menhir_run25(_menhir_env$3, _menhir_stack$2, /* MenhirState22 */10, _tok$2[0]);
          case 2 : 
              return _menhir_run33(_menhir_env$3, _menhir_stack$2, /* MenhirState22 */10, _tok$2[0]);
          case 3 : 
              return _menhir_run34(_menhir_env$3, _menhir_stack$2, /* MenhirState22 */10, _tok$2[0]);
          
        }
      }
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      if (_menhir_env$2[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                1007,
                14
              ]
            ];
      }
      _menhir_env$2[/* _menhir_error */3] = true;
      throw $$Error;
    }
    
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              1039,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    throw $$Error;
  }
  
}

function _menhir_goto_read_const_value(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_s !== 0) {
    switch (_menhir_s - 1 | 0) {
      case 0 : 
          var match = _menhir_stack[0];
          var _v_000 = /* tuple */[
            _menhir_stack[1],
            _v
          ];
          var _v_001 = match[1];
          var _v$1 = /* :: */[
            _v_000,
            _v_001
          ];
          return _menhir_goto_read_const_assoc(_menhir_env, match[0], _v$1);
      case 1 : 
          var _v_001$1 = _menhir_stack[1];
          var _v$2 = /* :: */[
            _v,
            _v_001$1
          ];
          return _menhir_goto_read_const_list(_menhir_env, _menhir_stack[0], _v$2);
      case 2 : 
          var _v$3 = _v;
          return _menhir_goto_read_default_variable_value(_menhir_env, _menhir_stack, _v$3);
      case 3 : 
      case 4 : 
      case 5 : 
      case 6 : 
      case 7 : 
      case 8 : 
      case 9 : 
      case 10 : 
      case 11 : 
          return _menhir_fail(/* () */0);
      
    }
  } else {
    return _menhir_fail(/* () */0);
  }
}

function _menhir_goto_option_NAME_(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  return _menhir_goto_read_variables(_menhir_env, _menhir_stack$1, undefined);
}

function _menhir_reduce44(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_read_selection(_menhir_env, _menhir_stack, _menhir_s, /* [] */0);
}

function _menhir_run66(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* Type */Block.__(0, [_v]);
  return _menhir_goto_read_variable_type(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_read_variable(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1134,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok !== 3) {
      if (_tok !== 16) {
        exit = 1;
      } else {
        var _menhir_env$1 = _menhir_discard(_menhir_env);
        var _tok$1 = _menhir_env$1[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok$1 === "number" || _tok$1.tag !== 1) {
          exit$1 = 2;
        } else {
          var _menhir_stack_001 = _tok$1[0];
          var _menhir_stack$2 = /* tuple */[
            _menhir_stack$1,
            _menhir_stack_001
          ];
          var _menhir_env$2 = _menhir_discard(_menhir_env$1);
          var _tok$2 = _menhir_env$2[/* _menhir_token */2];
          var exit$2 = 0;
          if (typeof _tok$2 === "number" && _tok$2 === 17) {
            var _menhir_env$3 = _menhir_discard(_menhir_env$2);
            var _tok$3 = _menhir_env$3[/* _menhir_token */2];
            var exit$3 = 0;
            if (typeof _tok$3 === "number") {
              if (_tok$3 === 10) {
                var __menhir_env = _menhir_env$3;
                var __menhir_stack = _menhir_stack$2;
                var __menhir_s = /* MenhirState65 */5;
                while(true) {
                  var _menhir_s = __menhir_s;
                  var _menhir_stack$3 = __menhir_stack;
                  var _menhir_env$4 = __menhir_env;
                  var _menhir_stack$4 = /* tuple */[
                    _menhir_stack$3,
                    _menhir_s
                  ];
                  var _menhir_env$5 = _menhir_discard(_menhir_env$4);
                  var _tok$4 = _menhir_env$5[/* _menhir_token */2];
                  var exit$4 = 0;
                  if (typeof _tok$4 === "number") {
                    if (_tok$4 === 10) {
                      __menhir_s = /* MenhirState67 */4;
                      __menhir_stack = _menhir_stack$4;
                      __menhir_env = _menhir_env$5;
                      continue ;
                    } else {
                      exit$4 = 1;
                    }
                  } else if (_tok$4.tag === 1) {
                    return _menhir_run66(_menhir_env$5, _menhir_stack$4, /* MenhirState67 */4, _tok$4[0]);
                  } else {
                    exit$4 = 1;
                  }
                  if (exit$4 === 1) {
                    if (_menhir_env$5[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "parser.ml",
                              1072,
                              6
                            ]
                          ];
                    }
                    _menhir_env$5[/* _menhir_error */3] = true;
                    return _menhir_errorcase(_menhir_env$5, _menhir_stack$4, /* MenhirState67 */4);
                  }
                  
                };
              } else {
                exit$3 = 4;
              }
            } else if (_tok$3.tag === 1) {
              return _menhir_run66(_menhir_env$3, _menhir_stack$2, /* MenhirState65 */5, _tok$3[0]);
            } else {
              exit$3 = 4;
            }
            if (exit$3 === 4) {
              if (_menhir_env$3[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "parser.ml",
                        1171,
                        26
                      ]
                    ];
              }
              _menhir_env$3[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env$3, _menhir_stack$2, /* MenhirState65 */5);
            }
            
          } else {
            exit$2 = 3;
          }
          if (exit$2 === 3) {
            if (_menhir_env$2[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1177,
                      20
                    ]
                  ];
            }
            _menhir_env$2[/* _menhir_error */3] = true;
            throw $$Error;
          }
          
        }
        if (exit$1 === 2) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1187,
                    14
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          throw $$Error;
        }
        
      }
    } else {
      var _menhir_env$6 = _menhir_discard(_menhir_env);
      var _v$1 = _v;
      return _menhir_goto_read_variables(_menhir_env$6, _menhir_stack[0], _v$1);
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              1218,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    throw $$Error;
  }
  
}

function _menhir_goto_read_variables(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1317,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 9 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          return _menhir_goto_read_variable(_menhir_env$1, _menhir_stack$1, /* [] */0);
      case 10 : 
          exit = 1;
          break;
      case 11 : 
          var _menhir_env$2 = _menhir_discard(_menhir_env);
          return _menhir_reduce44(_menhir_env$2, _menhir_stack$1, /* MenhirState91 */0);
      default:
        exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              1345,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    throw $$Error;
  }
  
}

function _menhir_goto_read_variable_type(__menhir_env, __menhir_stack, __menhir_s, __v) {
  while(true) {
    var _v = __v;
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s,
      _v
    ];
    if (_menhir_s !== 4) {
      if (_menhir_s !== 5) {
        return _menhir_fail(/* () */0);
      } else {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  879,
                  8
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number") {
          switch (_tok) {
            case 14 : 
                var _menhir_env$1 = _menhir_discard(_menhir_env);
                var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                if (typeof _tok$1 === "number") {
                  switch (_tok$1) {
                    case 0 : 
                        return _menhir_run73(_menhir_env$1, _menhir_stack$1, /* MenhirState72 */3);
                    case 10 : 
                        return _menhir_run76(_menhir_env$1, _menhir_stack$1, /* MenhirState72 */3);
                    case 11 : 
                        return _menhir_run79(_menhir_env$1, _menhir_stack$1, /* MenhirState72 */3);
                    case 13 : 
                        return _menhir_run85(_menhir_env$1, _menhir_stack$1, /* MenhirState72 */3);
                    default:
                      if (_menhir_env$1[/* _menhir_error */3]) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "parser.ml",
                                914,
                                18
                              ]
                            ];
                      }
                      _menhir_env$1[/* _menhir_error */3] = true;
                      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState72 */3);
                  }
                } else {
                  switch (_tok$1.tag | 0) {
                    case 0 : 
                        return _menhir_run74(_menhir_env$1, _menhir_stack$1, /* MenhirState72 */3, _tok$1[0]);
                    case 1 : 
                        return _menhir_run75(_menhir_env$1, _menhir_stack$1, /* MenhirState72 */3, _tok$1[0]);
                    case 2 : 
                        return _menhir_run83(_menhir_env$1, _menhir_stack$1, /* MenhirState72 */3, _tok$1[0]);
                    case 3 : 
                        return _menhir_run84(_menhir_env$1, _menhir_stack$1, /* MenhirState72 */3, _tok$1[0]);
                    
                  }
                }
            case 3 : 
            case 16 : 
                return _menhir_goto_read_default_variable_value(_menhir_env, _menhir_stack$1, undefined);
            case 0 : 
            case 1 : 
            case 2 : 
            case 4 : 
            case 5 : 
            case 6 : 
            case 7 : 
            case 8 : 
            case 9 : 
            case 10 : 
            case 11 : 
            case 12 : 
            case 13 : 
            case 15 : 
            case 17 : 
                exit = 1;
                break;
            case 18 : 
                return _menhir_run70(_menhir_env, _menhir_stack$1);
            
          }
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    927,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        
      }
    } else {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                825,
                8
              ]
            ];
      }
      var _tok$2 = _menhir_env[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok$2 === "number") {
        if (_tok$2 !== 4) {
          if (_tok$2 >= 18) {
            return _menhir_run70(_menhir_env, _menhir_stack$1);
          } else {
            exit$1 = 1;
          }
        } else {
          var _menhir_env$2 = _menhir_discard(_menhir_env);
          var _v$1 = /* List */Block.__(2, [_v]);
          __v = _v$1;
          __menhir_s = _menhir_stack[1];
          __menhir_stack = _menhir_stack[0];
          __menhir_env = _menhir_env$2;
          continue ;
        }
      } else {
        exit$1 = 1;
      }
      if (exit$1 === 1) {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  858,
                  12
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
      }
      
    }
  };
}

function _menhir_goto_read_argument_list(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            294,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run23(_menhir_env, _menhir_stack$1, /* MenhirState27 */9);
      case 4 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _v$1 = /* `List */[
            848054398,
            _v
          ];
          return _menhir_goto_read_argument_value(_menhir_env$1, _menhir_stack[0], _menhir_stack[1], _v$1);
      case 10 : 
          return _menhir_run26(_menhir_env, _menhir_stack$1, /* MenhirState27 */9);
      case 11 : 
          return _menhir_run29(_menhir_env, _menhir_stack$1, /* MenhirState27 */9);
      case 13 : 
          return _menhir_run35(_menhir_env, _menhir_stack$1, /* MenhirState27 */9);
      case 16 : 
          return _menhir_run36(_menhir_env, _menhir_stack$1, /* MenhirState27 */9);
      default:
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  340,
                  8
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState27 */9);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run24(_menhir_env, _menhir_stack$1, /* MenhirState27 */9, _tok[0]);
      case 1 : 
          return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState27 */9, _tok[0]);
      case 2 : 
          return _menhir_run33(_menhir_env, _menhir_stack$1, /* MenhirState27 */9, _tok[0]);
      case 3 : 
          return _menhir_run34(_menhir_env, _menhir_stack$1, /* MenhirState27 */9, _tok[0]);
      
    }
  }
}

function _menhir_run76(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_read_const_list(_menhir_env$1, _menhir_stack$1, /* [] */0);
}

function _menhir_run84(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* `Float */[
    365180284,
    _v
  ];
  return _menhir_goto_read_const_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run83(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* `Int */[
    3654863,
    _v
  ];
  return _menhir_goto_read_const_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run79(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_read_const_assoc(_menhir_env$1, _menhir_stack$1, /* [] */0);
}

function _menhir_run75(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* `Enum */[
    770676513,
    _v
  ];
  return _menhir_goto_read_const_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run73(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_read_const_value(_menhir_env$1, _menhir_stack, _menhir_s, /* `Bool */[
              737456202,
              true
            ]);
}

function _menhir_run85(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_read_const_value(_menhir_env$1, _menhir_stack, _menhir_s, /* `Bool */[
              737456202,
              false
            ]);
}

function _menhir_run74(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* `String */[
    -976970511,
    _v
  ];
  return _menhir_goto_read_const_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_read_operation_type(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1972,
            4
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 9 : 
      case 11 : 
          return _menhir_goto_option_NAME_(_menhir_env, _menhir_stack$1, undefined);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _v$1 = _tok[0];
    return _menhir_goto_option_NAME_(_menhir_env$1, _menhir_stack$1, _v$1);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              1994,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    throw $$Error;
  }
  
}

function _menhir_run70(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v = /* NonNullable */Block.__(1, [_menhir_stack[2]]);
  return _menhir_goto_read_variable_type(_menhir_env$1, _menhir_stack[0], _menhir_stack[1], _v);
}

function read_document(lexer, lexbuf) {
  var _menhir_env = /* record */[
    /* _menhir_lexer */lexer,
    /* _menhir_lexbuf */lexbuf,
    /* _menhir_token : () */0,
    /* _menhir_error */false
  ];
  var _menhir_stack_001 = _menhir_env[/* _menhir_lexbuf */1][/* lex_curr_p */11];
  var _menhir_stack = /* tuple */[
    /* () */0,
    _menhir_stack_001
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_read_definitions(_menhir_env$1, _menhir_stack, /* [] */0);
}

exports.$$Error = $$Error;
exports.read_document = read_document;
/* No side effect */
